//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Work+/InputMape.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMape: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMape()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMape"",
    ""maps"": [
        {
            ""name"": ""InpuMap"",
            ""id"": ""e09eb999-00b0-4d69-b195-0948183a41c8"",
            ""actions"": [
                {
                    ""name"": ""Player"",
                    ""type"": ""Value"",
                    ""id"": ""16c46992-2506-4bc1-8a4c-d0319715264d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""de3bb25e-0661-4363-94bd-eaffb06c768d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""07ec06a0-6cc6-48ce-8f25-98647e127b15"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3396ad5c-b94f-499c-b31a-0d74bc6d6b52"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""75cbce55-717f-4632-bc8a-74f158d26c33"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""60b48efa-e37b-40c7-86a4-d15fc1cb04c0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InpuMap
        m_InpuMap = asset.FindActionMap("InpuMap", throwIfNotFound: true);
        m_InpuMap_Player = m_InpuMap.FindAction("Player", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InpuMap
    private readonly InputActionMap m_InpuMap;
    private List<IInpuMapActions> m_InpuMapActionsCallbackInterfaces = new List<IInpuMapActions>();
    private readonly InputAction m_InpuMap_Player;
    public struct InpuMapActions
    {
        private @InputMape m_Wrapper;
        public InpuMapActions(@InputMape wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player => m_Wrapper.m_InpuMap_Player;
        public InputActionMap Get() { return m_Wrapper.m_InpuMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InpuMapActions set) { return set.Get(); }
        public void AddCallbacks(IInpuMapActions instance)
        {
            if (instance == null || m_Wrapper.m_InpuMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InpuMapActionsCallbackInterfaces.Add(instance);
            @Player.started += instance.OnPlayer;
            @Player.performed += instance.OnPlayer;
            @Player.canceled += instance.OnPlayer;
        }

        private void UnregisterCallbacks(IInpuMapActions instance)
        {
            @Player.started -= instance.OnPlayer;
            @Player.performed -= instance.OnPlayer;
            @Player.canceled -= instance.OnPlayer;
        }

        public void RemoveCallbacks(IInpuMapActions instance)
        {
            if (m_Wrapper.m_InpuMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInpuMapActions instance)
        {
            foreach (var item in m_Wrapper.m_InpuMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InpuMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InpuMapActions @InpuMap => new InpuMapActions(this);
    public interface IInpuMapActions
    {
        void OnPlayer(InputAction.CallbackContext context);
    }
}
